DOM 优化
===========================
浏览器会把dom与js独立实现
	像两个独立的小岛

js操作dom
	从一个岛到另一个岛

dom的性能
	岛与岛之间的桥，每次通过要收过桥费
	应该尽量减少过桥的次数

innerHTML 与 dom方法对比

	innerHTML的执行效率和dom方法之间的执行效率做比较，在不同内核的浏览器中执行效率是
	不同的。
	webkit内核渲染dom方法的执行效率要高于innerHTML，在其他内核浏览器中，innerHTML
	效率是高于dom方法的。


------------------------------
减少DOM操作
	节点克隆
		-cloneNode
		克隆节点相对于创建一个完整的节点，要快一些

	访问元素集合
		-尽量使用局部变量

	元素节点
		-尽量用只获取元素的节点方法
		假如需要获取一个元素节点，尽量选择只获取元素节点的方式而不是获取多个类型的元素节点。例如
		childNodes  --- 》获取元素节点、文本节点  但是我们只需要一个元素节点，就可以使用
		children  获取元素节点

	选择器API
		—利用querySelector 、querySelectorAll
		如果需要选择ul 下面的li等类似操作，可以采用一些类似于上面的写法
		例如：
			ul#ul
				li	
				li

		常见的写法：
			var oUl = document.getElementById('ul');
			var lis = oUl.getElementsByTagName('li');

		我们可以采用下面的写法来提高效率
			var lis = document.querySelectorAll("#ul li");
		此种写法减少了dom操作，自然也就缩短了时间

--------------------------------------
DOM与浏览器
	重排：改变页面的内容
	重绘：浏览器显示内容

	应该尽可能的减少上面的两个步骤 ，可以通过下面的方式
	添加顺序：
		-尽量在appendChild前添加操作
		如：5.html

	合并dom操作
		-利用cssText
		如果对一个元素进行多次的dom操作，可以尽量的减少dom操作来减少时间
		如：6.html

	缓存布局信息

		例如我们常见的通过定时器让一个元素移动

		7.html

	文档碎片
		-createDocumentFragment()

---------------------------------------
DOM与事件
	-事件委托

DOM与前端模板
	-能更好的对逻辑和视图分离，mvc架构的基础
